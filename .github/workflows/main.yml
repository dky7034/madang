name: Deploy To EC2
# 이 워크플로우는 'main' 브랜치에 푸시될 때 실행됩니다.
on:
  push:
    branches:
      - main

jobs:
  # 빌드 작업 정의
  build:
    # 이 작업은 최신 우분투 버전에서 실행됩니다.
    runs-on: ubuntu-latest
    # 환경 변수 설정 (비밀 정보는 GitHub Secrets에서 가져옴)
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PWD: ${{ secrets.DB_PWD }}
      DB_URL: ${{ secrets.DB_URL }}
    steps:
      # 1. GitHub 저장소에서 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java 17 버전 설정 (Temurin 배포판 사용)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Java 배포판을 Temurin으로 설정

      # 3. Maven을 사용하여 애플리케이션 빌드 (테스트는 건너뜀)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4. Docker Hub에 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}  # Docker Hub 사용자 이름
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}  # Docker Hub 액세스 토큰

      # 5. Docker 이미지를 빌드하고 Docker Hub에 푸시
      - name: Build and push Docker image
        run: |
          # 애플리케이션을 Docker 이미지로 빌드
          docker build -t ${{ secrets.DOCKER_USER }}/myapp:latest .
          # Docker Hub에 이미지 푸시
          docker push ${{ secrets.DOCKER_USER }}/myapp:latest

  # 배포 작업 정의
  deploy:
    # 빌드 작업 완료 후에 실행됩니다.
    runs-on: ubuntu-latest
    # 'build' 작업이 완료되어야 이 작업이 실행됨
    needs: build
    steps:
      # 1. EC2 인스턴스에 SSH로 접속
      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 인스턴스의 IP 주소
          username: ${{ secrets.EC2_USERNAME }}  # EC2에 로그인할 사용자 이름
          key: ${{ secrets.EC2_PRIVATE_KEY }}  # EC2에 접속할 개인 키
          script_stop: true  # 스크립트 실행 중 오류 발생 시 작업을 중지
          script: |
            # Docker Hub에 로그인 (EC2 서버에서)
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
            # 최신 Docker 이미지 풀링 (Docker Hub에서 최신 버전 가져오기)
            docker pull ${{ secrets.DOCKER_USER }}/myapp:latest
            # 이미 실행 중인 컨테이너가 있으면 중지하고 삭제
            docker stop myapp || true
            docker rm myapp || true
            # 새로운 컨테이너를 백그라운드에서 실행, 네트워크 및 DB 환경 변수 설정
            docker run -d -p 8080:8080 --name myapp --network=mynet \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PWD=${{ secrets.DB_PWD }} \
            ${{ secrets.DOCKER_USER }}/myapp:latest
